def minHashAlgo(articles, n_permutations):
    """ This function aims to implement the minHash algorithm
    Inputs :
    - articles : the list of all the articles texts under the bag of words representation
    - n_articles : nunmber of articles we want to exploit out of the whole list.
    - n_permutations : number of permutations we want to process

    Output: the minHash matrix, of shape (n_articles, n_permutations)
    - rows: articles
    - columns: permutations
    """

    from sklearn.feature_extraction.text import CountVectorizer
    from sklearn.utils import shuffle
    import numpy as np


    minHash = np.zeros((len(articles), n_permutations))
    # We initialize the value of our minHash matrix with zeros. We will fill it afterwards

    buffer = articles
    # This variable will store the permuted matrix

    for i in range(n_permutations):
        buffer = shuffle(buffer.transpose()).transpose()
        # Permute the rows of set given in argument.
        # We use this transpose trick to keep our bag of words shape (articles in rows and words in columns)

        for j in range(buffer.shape[0]): # We go through all the rows of the permuted matrix

            minHash[j][i] = np.min(buffer[j].nonzero()) # This instruction gives the value of the first value non zero.

    np.set_printoptions(suppress=True)

    return minHash


def build_word_bag(dbname):
    from pymongo import MongoClient
    import time
    import numpy as np

    client = MongoClient()
    db = client[dbname]

    bag_of_words = db.dataset.find()

    words = {}
    words_indexes = {}
    user_ids = {}
    user_indexes = {}

    # First passage : fulfilling the list of words of the bag of words.
    for doc in bag_of_words:
        user = doc['_id']['user_id']
        word = doc['_id']['word']
        if user not in user_ids:
            user_ids[user] = len(user_ids)
        if word not in words:
            words[word] = len(words)

    M = np.zeros((len(user_ids), len(words)))

    bag_of_words = db.dataset.find()
    # Second passage : putting values into the empty matrix
    for doc in bag_of_words:
        user = doc['_id']['user_id']
        word = doc['_id']['word']
        count = doc['value']

        M[(user_ids[user], words[word])] = count

    for i in words:
        words_indexes[words[i]] = i
    for i in user_ids:
        user_indexes[user_ids[i]] = i

    return M, words_indexes, user_ids




from pymongo import MongoClient
import time

dbname = 'work_db'
client = MongoClient()
db = client[dbname]
start = time.time()

bow_matrix, words_indexes, users_ids = build_word_bag(dbname)
print("bag of words done in %f" % (time.time() - start))
my_hash = minHashAlgo(bow_matrix, 5)
print("minhash done in %f" % (time.time() - start))
users_cursor = db.users.find()
for user in users_cursor:
    db.hashed_dataset.insert({'_id': user['_id'], 'label':user['label'], 'x':my_hash[users_ids[user['_id']]].tolist()})

print("creation of the set done in %f" % (time.time() - start))